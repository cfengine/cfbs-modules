bundle agent windows_capability_installed(capability_name)
{
  methods:
    "Installed" usebundle => windows_capability:_windows_capability_state("${capability_name}", "Installed");
}
bundle agent windows_optionial_capability_notpresent(capability_name)
{
  methods:
    "NotPresent" usebundle => windows_capability:_windows_capability_state("${capability_name}", "NotPresent");
}

bundle agent windows_capability
{
  methods:
    windows.!data:disable_windows_capability_inventory::
      "windows_capability:_inventory";
}

body file control
{
  namespace => "windows_capability";
}

# https://learn.microsoft.com/en-us/powershell/module/dism/get-windowscapability?view=windowsserver2022-ps
# https://learn.microsoft.com/en-us/powershell/module/dism/remove-windowscapability?view=windowsserver2022-ps
# https://learn.microsoft.com/en-us/powershell/module/dism/add-windowscapability?view=windowsserver2022-ps
bundle agent _inventory
{
  vars:
    windows::
      "cache_file" string => "${sys.statedir}${const.dirsep}${this.namespace}_cache.csv";
      "command" string => "Get-WindowsCapability -Online | ConvertTo-Csv -notypeinformation | select-object -skip 1 | Set-Content -Path '${cache_file}'";

      "csv" data => readcsv("${cache_file}");
      "i" slist => getindices("csv");
      "${this.namespace}[${i}]" string => "${csv[${i}][0]}:${csv[${i}][1]}",
        meta => { "inventory", "attribute_name=Windows Capability" };

  files:
    "${cache_file}"
      file_select => default:days_old(1),
      delete => default:tidy;

  commands:
   windows::
     "${command}"
       if => not(fileexists("${cache_file}")),
       contain => default:powershell;
}


bundle agent _windows_capability_state(capability_name, desired_state)
{
  vars:
    "operation" string => ifelse(strcmp("${desired_state}", "Installed"), "Add", "Remove");
  classes:
    windows::
      "state_not_ok" expression => returnszero("if((Get-WindowsCapability -Online -Name ${capability_name} | select-object -expandproperty state) -ne '${desired_state}'){exit 0}else{exit 1}", "powershell");

  commands:
    windows.state_not_ok::
      "${operation}-WindowsCapability -Online -Name ${capability_name}"
        classes => default:results("bundle", "state"),
        contain => default:powershell;

  files:
    windows.state_repaired::
      "${_inventory.cache_file}"
        delete => default:tidy;
}
